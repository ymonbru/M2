import Mathlib
import Qq

open Qq Lean Meta Elab Tactic CategoryTheory



def Cate : Type := sorry
instance : Quiver  Cate := by
  refine { Hom := ?_ }
  exact fun x y => Nat

def isObjStep (e : Expr) (l : List Expr) : TacticM <| List Expr := do
  if ‚Üê isDefEq (‚Üê inferType e) (Expr.const ``Cate [])  then
    return e :: l
  else
    return l

def isHomStep (l : List <| Expr √ó Expr √ó Expr) (e : Expr) : TacticM <|  List <| Expr √ó Expr √ó Expr := do
  --logInfo m!"{‚Üê ppExpr e}"
  let typeE ‚Üê inferType e
  if typeE.isAppOf (``Quiver.Hom) then

    return (e, typeE.getArg! 2,typeE.getArg! 3) :: l
  else
    return l


variable (v : List Cate) (e : Œ† a b : Fin v.length, List (v.get a ‚ü∂ v.get b))

def toNb : List <| List Nat := List.ofFn (fun x => List.ofFn (fun k => (e x k).length))

def QuivJ (x y : Fin v.length): Type :=
  let h := toNb v e
  let a : Fin h.length := ‚ü®x.val, Fin.val_lt_of_le x (le_of_eq (by simp [h,toNb]))‚ü©
  let b : Fin (h.get a).length := ‚ü®y.val, Fin.val_lt_of_le y (le_of_eq (by simp [h, a, toNb]))‚ü©

  Fin <| ((h.get a).get b)

def ObjMapJ : Fin v.length ‚Üí Cate := v.get

def FunMapJ  {x y : Fin v.length} (f : QuivJ v e x y) : (ObjMapJ v x ‚ü∂ ObjMapJ v y) := (e x y).get ‚ü®f.val, Fin.val_lt_of_le f (le_of_eq (by simp [toNb]))‚ü©



def isCompatible (x y : Expr) (e: Expr √ó Expr √ó Expr) : TacticM Bool := do
  return (‚Üê isDefEq x e.2.1) && (‚Üê isDefEq y e.2.2)

#check Quiver.mk
#check List.foldlM
#check List.get

elab "BuildDiagram" : tactic => do
  let hyp ‚Üê getLocalHyps
  let listV ‚Üê  Array.foldrM isObjStep [] hyp
  let listH ‚Üê  Array.foldlM isHomStep [] hyp
  let listVE ‚Üê List.foldrM (fun e l => mkAppM ``List.cons #[e, l]) (q(List.nil) : Q(List Cate)) listV


  --terriblement pas obptimal tout ce bazard
  let mut listHE := []
  let mut listN := []
  for x in listV.reverse do
    let mut listHEx := []
    let mut listNx := []
    for y in listV.reverse do


      let Hxy ‚Üê listH.filterM (isCompatible x y)
      let nxy : Q(Nat) := Expr.lit (Literal.natVal Hxy.length)
      listNx := nxy :: listNx


      let nilExy ‚Üê mkAppOptM ``List.nil #[‚Üê mkAppM ``Quiver.Hom #[x, y]]
      let Hxy ‚Üê List.foldrM (fun e l => mkAppM ``List.cons #[e.1, l]) nilExy Hxy
      listHEx := Hxy :: listHEx

    let nilEn ‚Üê mkAppOptM ``List.nil #[q(Nat)]
    let Nx ‚Üê List.foldrM (fun e l => mkAppM ``List.cons #[e, l]) nilEn listNx

    listN := Nx :: listN
    listHE := listHEx :: listHE

  let truc := q(fun (x y : Nat) => ((listHE.get! x).get! y))

  let nilEln ‚Üê mkAppOptM ``List.nil #[q(List Nat)]

  let QuivJE ‚Üê List.foldrM (fun e l => mkAppM ``List.cons #[e, l]) nilEln listN

  --logInfo m!"{listV},{listHE}"

  logInfo m!"{‚Üê listV.mapM (fun e =>  ppExpr e)}"
  logInfo m!"{‚Üê listH.mapM (fun e =>  (ppExpr e.1)) }"
  logInfo m!"{‚Üê listH.mapM (fun e =>  (ppExpr e.2.1)) }"
  logInfo m!"{‚Üê listH.mapM (fun e =>  (ppExpr e.2.2)) }"

  let n := listV.length
  let nQ : Q(Nat) := Expr.lit (Literal.natVal n)
  let J : Q(Type) := mkApp q(Fin) nQ

  let QuivJ ‚Üê mkAppM ``QuivJ #[nQ, QuivJE]
  let instQuiver ‚Üê mkAppOptM ``Quiver.mk #[J, QuivJ]

  let FunObj ‚Üê mkAppOptM `ObjMapJ #[listVE]

  --FunMapJ : (a b : Cate) (e : List (a ‚ü∂ b)) (n : ‚Ñï) (h : List (List ‚Ñï)) (x y : Fin n) (hyp : (--- = ---)
  --let FunMap ‚Üê mkAppM `FunMapJ #[]


  evalTactic <| ‚Üê `(tactic| set $(mkIdent "J".toName) := $(‚Üê Term.exprToSyntax J))
  evalTactic <| ‚Üê `(tactic| set $(mkIdent "JQ".toName) := $(‚Üê Term.exprToSyntax instQuiver))
  evalTactic <| ‚Üê `(tactic| set $(mkIdent "Jfun".toName) := $(‚Üê Term.exprToSyntax FunObj))
  --evalTactic <| ‚Üê `(tactic| set $(mkIdent "Diag".toName) := CST `C x)

  --let v := sorry
  --let e := sorry

  --let D := sorry

  --return-/



example {a b c d : Cate} (f h : a ‚ü∂ b) (g : c ‚ü∂ b) : True := by
  let v: List Cate := [a, b, c]
  let e (a b : Fin 3) : List (v.get a ‚ü∂ v.get b) := match a,b with
    |0,1 => [f]
    |2,1 => [g]
    | _,_ => []

  let J := Fin 3
  let JQ : Quiver J := Quiver.mk <| QuivJ v e
  let JDiag : J ‚•§q Cate := ‚ü®ObjMapJ v , FunMapJ v e‚ü©

  have : JDiag.obj 1 = b := by rfl
  have : JDiag.map (‚ü®0, by simp [toNb,e, v] ‚ü© : JQ.Hom 0 1 ) = f := by rfl


  BuildDiagram
  --suffices : Jfun ‚ü®0, sorry‚ü© = Jfun ‚ü®0,sorry‚ü©
  --exact this


  let x : Fin 4 := ‚ü®2,by exact Nat.lt_of_sub_eq_succ rfl‚ü©

  let JDiag : J ‚•§q Cate := ‚ü® Jfun, by
    intro x y hom


    sorry‚ü©

  have : JDiag.obj x  = c := by
    rfl
  sorry


/-
unsafe def diagObjE (x : J) : TacticM C:= do
  let h := v.get x
  let t ‚Üê inferType h
  guard <| ‚Üê isDefEq t (Expr.const `C [])
  evalExpr C (Expr.const `C []) h

unsafe def diagObj : TacticM <| J ‚Üí C :=  do
  let mut l := []
  for h : i in [0: v.length] do
    let iFin : Fin v.length := ‚ü®i, Membership.mem.upper h‚ü©
    -- au pire pas grave si on ajoute une nouvelle source d'erreur
    l := l.cons (‚Üê diagObjE C iFin)

  return fun x => l[x.val]!-/

/-unsafe def diagMapE { a b : J } ( f : a ‚ü∂ b) (x y : C) : TacticM (x ‚ü∂ y):= do
  let t := e.get f.type
  let h := t.get f.hom
  let ty ‚Üê inferType h.1

  let homType ‚Üê mkAppM (``Quiver.Hom) #[v.get h.2.1, v.get h.2.2]
  guard <| ‚Üê isDefEq ty homType

  --let d ‚Üê diagObjE C v h.2.1
  --let cd ‚Üê diagObjE C v h.2.2
  -- la pour le coup on exploite √† mort les possibilit√©es de unsafe
  evalExpr (x ‚ü∂ y) homType h.1
/-
variable [Inhabited ((x : C) √ó (y : C) √ó (x ‚ü∂ y))]

unsafe def diagMap (x y): TacticM <| Fin e.length ‚Üí (Œ£ x : C, Œ£ y : C , x ‚ü∂ y) :=  do
  let mut l := []
  for i in [0: e.length] do
    let iFin : Fin e.length := ‚ü®i, by sorry‚ü©
    let h := e.get iFin
    let t ‚Üê inferType h.1

    let homType ‚Üê mkAppM (``Quiver.Hom) #[v.get h.2.1, v.get h.2.2]
    guard <| ‚Üê isDefEq t homType

    let d ‚Üê diagObjE C h.2.1
    let cd ‚Üê diagObjE C h.2.2

    l := l.cons ‚ü®d, cd, ‚Üê evalExpr (d ‚ü∂ cd) homType h.1‚ü©

  return fun x => l[x.val]!-/

unsafe def diag0 : TacticM <| (Prefunctor J C) := do
  let obj ‚Üê diagObj C
  --let map ‚Üê diagMap C v e

  let map {x y : J} : TacticM <| ( x ‚ü∂ y) ‚Üí (obj x ‚ü∂ obj y) := do
    let mut l := []
    let n := HomE x y
    let xToY := e.get n

    for h : i in [0: xToY.length] do
      let iFin : Fin xToY.length := ‚ü®i, Membership.mem.upper h‚ü©
      let h := xToY.get iFin
      let t ‚Üê inferType h.1

      let homType ‚Üê mkAppM (``Quiver.Hom) #[v.get h.2.1, v.get h.2.2]
      guard <| ‚Üê isDefEq t homType

      --let d ‚Üê diagObjE C h.2.1
      --let cd ‚Üê diagObjE C h.2.2

      l := l.cons (‚Üê evalExpr (obj x ‚ü∂ obj y) homType h.1)
    return (fun f => l.get ‚ü®f.hom.val,sorry‚ü©)


  let bidule ‚Üê map

  return ‚ü®obj , bidule‚ü©

    --sorry‚ü©

def diag  :  Prefunctor (Fin v.length) C where
  obj := sorry
  map := sorry-/



elab "#expr" "[" t:term "]" : command =>
  Command.liftTermElabM do
  let t ‚Üê Term.elabTerm t none
  let t ‚Üê instantiateMVars t
  logInfo m!"Expression: {t}:\n{repr t}"
  --let t ‚Üê reduce t
  --let t ‚Üê instantiateMVars t
  --logInfo m!"Reduced: {t}:\n{repr t}"

#check Prefunctor
variable (a b c : Cate) (f : a ‚ü∂ b) (g : c ‚ü∂ b)

def v1: List Cate := [a, b, c]

#check v1
def e2 (x y : Fin 3) : List ([a,b,c].get x ‚ü∂ [a,b,c].get y) := match x,y with
    |0,1 => [f]
    |2,1 => [g]
    | _,_ => []

#eval q( fun (x y : Fin 3) (a : Cate) (f : a ‚ü∂ a) => match x,y with
    |0,1 => [f]
    | _,_ => [])

#expr [e2]

variable (x : C)

#expr [x]
#expr [Prefunctor (Fin 4) (Fin 4)]



def CST : Prefunctor J C where
  obj _ := x
  map _ := ùüô x

#expr [CST]
