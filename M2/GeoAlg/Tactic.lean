import Mathlib

open Lean Meta Elab Tactic CategoryTheory

variable (C : Type) [Category C] [Inhabited C]
--variable (v : List Expr) (e : List <| Expr √ó (Fin v.length) √ó (Fin v.length))

-- pas de variable c'est plus simple surtout que apr√®s on va tout calculer
def v : List Expr := sorry
def e :  List <| List <| Expr √ó (Fin v.length) √ó (Fin v.length) := sorry


def J : Type := Fin v.length

def HomE (x y : J) : Fin e.length := sorry -- la liste des trucs de type x ‚ü∂ y

-- peut etre virer le expr on verra
structure HomJ (x y : J) : Type where
  type : Fin e.length
  hom : Fin (e.get type).length
  dEq : ((e.get type).get hom).2.1 = x.val
  cdEq : ((e.get type).get hom).2.2 = y.val

instance QuiverJ : Quiver (J) := ‚ü®HomJ‚ü©

unsafe def diagObjE (x : J) : TacticM C:= do
  let h := v.get x
  let t ‚Üê inferType h
  guard <| ‚Üê isDefEq t (Expr.const `C [])
  evalExpr C (Expr.const `C []) h

unsafe def diagObj : TacticM <| J ‚Üí C :=  do
  let mut l := []
  for i in [0: v.length] do
    let iFin : Fin v.length := ‚ü®i, by sorry‚ü©
    -- au pire pas grave si on ajoute une nouvelle source d'erreur
    l := l.cons (‚Üê diagObjE C iFin)

  return fun x => l[x.val]!

unsafe def diagMapE { a b : J } ( f : a ‚ü∂ b) (x y : C) : TacticM (x ‚ü∂ y):= do
  let t := e.get f.type
  let h := t.get f.hom
  let ty ‚Üê inferType h.1

  let homType ‚Üê mkAppM (``Quiver.Hom) #[v.get h.2.1, v.get h.2.2]
  guard <| ‚Üê isDefEq ty homType

  --let d ‚Üê diagObjE C v h.2.1
  --let cd ‚Üê diagObjE C v h.2.2
  -- la pour le coup on exploite √† mort les possibilit√©es de unsafe
  evalExpr (x ‚ü∂ y) homType h.1
/-
variable [Inhabited ((x : C) √ó (y : C) √ó (x ‚ü∂ y))]

unsafe def diagMap (x y): TacticM <| Fin e.length ‚Üí (Œ£ x : C, Œ£ y : C , x ‚ü∂ y) :=  do
  let mut l := []
  for i in [0: e.length] do
    let iFin : Fin e.length := ‚ü®i, by sorry‚ü©
    let h := e.get iFin
    let t ‚Üê inferType h.1

    let homType ‚Üê mkAppM (``Quiver.Hom) #[v.get h.2.1, v.get h.2.2]
    guard <| ‚Üê isDefEq t homType

    let d ‚Üê diagObjE C h.2.1
    let cd ‚Üê diagObjE C h.2.2

    l := l.cons ‚ü®d, cd, ‚Üê evalExpr (d ‚ü∂ cd) homType h.1‚ü©

  return fun x => l[x.val]!-/

unsafe def diag0 : TacticM <| Prefunctor J C := do
  let obj ‚Üê diagObj C
  --let map ‚Üê diagMap C v e

  let map {x y : J} : TacticM <| ( x ‚ü∂ y) ‚Üí (obj x ‚ü∂ obj y) := do
    let truc: Inhabited (obj x ‚ü∂ obj y) := sorry
    let mut l := []
    let n := HomE x y
    let xToY := e.get n

    for j in [1:3] do
      have : j< 4 := by
        --apply?
        sorry
      l := []

    for i in [0, xToY.length] do
      let iFin : Fin xToY.length := ‚ü®i, by sorry‚ü©
      let h := xToY.get iFin
      let t ‚Üê inferType h.1

      let homType ‚Üê mkAppM (``Quiver.Hom) #[v.get h.2.1, v.get h.2.2]
      guard <| ‚Üê isDefEq t homType

      --let d ‚Üê diagObjE C h.2.1
      --let cd ‚Üê diagObjE C h.2.2

      l := l.cons (‚Üê evalExpr (obj x ‚ü∂ obj y) homType h.1)
    return (fun f => l.get ‚ü®f.hom.val,sorry‚ü©)


  let bidule ‚Üê map

  return ‚ü®obj , bidule‚ü©

    --sorry‚ü©

def diag  :  Prefunctor (Fin v.length) C where
  obj := sorry
  map := sorry



def isObjStep (l : List Expr) (e : Expr) : MetaM <| List Expr := do
  if ‚Üê isDefEq (‚Üê inferType e) (Expr.const `C []) then
    return e :: l
  else
    return l

def isHomStep (l : List <| Expr √ó Expr √ó Expr) (e : Expr) :  List <| Expr √ó Expr √ó Expr :=
  if e.isAppOf (``Quiver.Hom) then
    (e, e.getArg! 4,e.getArg! 5) :: l
  else
    l

variable (x : C)

def CST : Prefunctor J C where
  obj _ := x
  map _ := ùüô x

elab "BuildDiagram" : tactic => do
  let hyp ‚Üê getLocalHyps
  let listV := Array.foldlM isObjStep [] hyp
  let listH := Array.foldl isHomStep [] hyp

  --#check J

  let jDiag := "Jdiag".toName
  evalTactic <| ‚Üê `(tactic| set $(mkIdent jDiag) := Fin 4)
  evalTactic <| ‚Üê `(tactic| set $(mkIdent "Diag".toName) := CST C x)

  --let v := sorry
  --let e := sorry

  --let D := sorry

  --return

example {a b : C} (f : a ‚ü∂ b) : True := by
  BuildDiagram
  sorry
