
import M2.Ksheaves
import Mathlib.Topology.Sets.Opens

open CategoryTheory CategoryTheory.Limits TopologicalSpace TopologicalSpace.Compacts Opposite

variable {X} [TopologicalSpace X]
variable {C} [Category C] [HasColimits C] [HasLimits C]

attribute [local aesop safe (rule_sets := [CategoryTheory])] colimit.hom_ext limit.hom_ext

--Œ±^*
noncomputable section
variable (K : Compacts X)
variable (F : (Opens X)·µí·µñ ‚•§ C)
variable (P : Opens X ‚Üí Prop)-- true for the  le alpha normal et IsCompact (closure U.carrier) pour la version relativement compacte

/--The property of containing K and satisfying P-/
def KsubU : Set (Opens X) := fun (U:Opens _) => (K.carrier ‚äÜ U) ‚àß P U

/--The full subcategory induced by the property KsubU-/
def KsubU_cat : Type := FullSubcategory (KsubU K P)

/-instance : SetLike (KsubU_cat K P) X where
  coe U:= U.obj.carrier

  coe_injective':= fun ‚ü®_ , _ ‚ü© ‚ü®_, _‚ü© h => by
    apply FullSubcategory.ext
    simp at h
    exact h-/


instance : Category (KsubU_cat K P) := FullSubcategory.category (KsubU K P)

/-- The diagram obtained by restricting F to the category KsubU-/
@[simps!]
def FU : (KsubU_cat K P)·µí·µñ ‚•§ C := Functor.comp (fullSubcategoryInclusion (KsubU K P)).op  F

variable (K‚ÇÅ K‚ÇÇ : Compacts X) (f : K‚ÇÅ ‚ü∂ K‚ÇÇ) --K1 ‚äÜ K2

/-- The functor that sends opens that containt K2 to opens that contains K1-/
@[simps]
def K1subK2subU : (KsubU_cat K‚ÇÇ P) ‚•§ (KsubU_cat K‚ÇÅ P ) where
  obj W := (‚ü®W.obj,Set.Subset.trans (leOfHom _ ) W.property.1 , W.property.2‚ü© : KsubU_cat _ _)
  map  _ := homOfLE (leOfHom _)

/-- The natural transformation of change of basis for the diagram FU-/
@[simps]
def K1subK2natTrans : (FU _ F P) ‚ü∂  (Functor.comp (K1subK2subU _ _ _ f).op (FU _ F _)) where
  app _ := ùüô _

/-- The functor Œ±^*F-/
@[simps]
def AlphaUpStarF : (Compacts X)·µí·µñ ‚•§ C  where
  obj K := colimit (FU K.unop F P)
  map f := colimMap (K1subK2natTrans F P _ _ f.unop) ‚â´ (colimit.pre (FU _ _ _) (K1subK2subU _ _ _ _ ).op)

variable (F‚ÇÅ F‚ÇÇ : (Opens X)·µí·µñ ‚•§ C) (œÑ : F‚ÇÅ ‚ü∂ F‚ÇÇ)

/-- The restriction of the natural transformation between the digram FU over K‚ÇÅ eand FU over K‚ÇÇ -/
@[simps]
def œÑres : (FU K F‚ÇÅ P) ‚ü∂ (FU _ F‚ÇÇ _) where
  app U := œÑ.app <| op (U.unop.obj)

/-- The natural transformation Œ±^* œÑ between Œ±^* F‚ÇÅ and Œ±^* F‚ÇÇ-/
@[simps]
def AlphaUpStarTau : (AlphaUpStarF F‚ÇÅ P) ‚ü∂ (AlphaUpStarF F‚ÇÇ P) where
  app K := colimMap (œÑres K.unop P _ _ œÑ)

/-- The functor Œ±^* with the conditon P-/
@[simps]
def AlphaUpStarP : ((Opens X)·µí·µñ ‚•§ C) ‚•§ (Compacts X)·µí·µñ ‚•§ C where
  obj _ := AlphaUpStarF _ _
  map := AlphaUpStarTau P _ _


/-- The condition that is always true -/
def trueCond :Opens X ‚Üí Prop:= Œª _ => true

/-- The first version of Œ±^* -/
@[simps!]
def AlphaUpStar : ((Opens X)·µí·µñ ‚•§ C)‚•§ ((Compacts X)·µí·µñ ‚•§ C) := AlphaUpStarP (trueCond)

end

noncomputable section
--Œ±_*

variable (U : Opens X) (G : (Compacts X)·µí·µñ ‚•§ C)

/-- The condition over compacts subset of being contained in U -/
def UsupK : Set (Compacts X) := fun (K:Compacts X) => (K : Set X) ‚äÜ U

/-- The category induced by UsupK -/
def UsupK_cat : Type := FullSubcategory (UsupK U)

instance : Category (UsupK_cat U) := FullSubcategory.category (UsupK U)

/-- The diagrom obtained by restricting G to the subcategory UsupK-/
@[simps!]
def GK : (UsupK_cat U)·µí·µñ ‚•§ C := Functor.comp (fullSubcategoryInclusion (UsupK U)).op  G

variable (U‚ÇÅ U‚ÇÇ : Opens X) (f : U‚ÇÅ ‚ü∂ U‚ÇÇ)-- U‚ÇÅ ‚äÜ U‚ÇÇ

/-- The functor that sends compacts contained  in U‚ÇÅ to compaccts contained in U‚ÇÇ-/
@[simps]
def U2supU1supK : (UsupK_cat U‚ÇÅ) ‚•§ (UsupK_cat U‚ÇÇ) where
  obj W := (‚ü®W.obj,Set.Subset.trans W.property (leOfHom f)‚ü© : UsupK_cat _)
  map _ := homOfLE (leOfHom _)

/-- The natural transformation of change of basis for the diagram GK-/
@[simps]
def U2supU1natTrans : (GK _ G) ‚ü∂  Functor.comp (U2supU1supK _ _ f).op (GK _ G) where
  app _ := ùüô _

variable [HasLimits C]

/-- The functor Œ±_* G-/
@[simps]
def AlphaDownStarG : (Opens X)·µí·µñ ‚•§ C  where
  obj U := limit (GK U.unop G)
  map f := (limit.pre (GK _ G) (U2supU1supK _ _ f.unop).op) ‚â´ limMap (U2supU1natTrans G _ _ f.unop)

variable (G‚ÇÅ G‚ÇÇ:(Compacts X)·µí·µñ ‚•§ C) (œÉ : G‚ÇÅ ‚ü∂ G‚ÇÇ)

/-- The natural transformation induced by œÉ between the two diagrams-/
@[simps]
def œÉres : (GK U G‚ÇÅ) ‚ü∂ (GK _ G‚ÇÇ) where
  app K:= œÉ.app (op (K.unop.obj))

/-- The natural transformation Œ±_* œÉ between Œ±_* G‚ÇÅ and /alpha_*G‚ÇÇ -/
@[simps]
def AlphaDownStarSigma : (AlphaDownStarG G‚ÇÅ) ‚ü∂ (AlphaDownStarG G‚ÇÇ) where
  app U := limMap <| œÉres U.unop _ _ œÉ

/-- The functor Œ±_*-/
@[simps]
def AlphaDownStar : ((Compacts X)·µí·µñ ‚•§ C) ‚•§ (Opens X)·µí·µñ ‚•§ C where
  obj _:= AlphaDownStarG _
  map := AlphaDownStarSigma _ _

end

--Adjunction

noncomputable section

variable {F : (Opens X)·µí·µñ‚•§ C} {G : (Compacts X)·µí·µñ ‚•§ C} (œÑ : (AlphaUpStar).obj F ‚ü∂ G) (œÉ : F‚ü∂ (AlphaDownStar).obj G) (K : Compacts X) (U : Opens X)


/-- The naturals maps from F(U) to the family of G(K) for K contained in U-/
@[simps]
def ConeFtoAG_NT : (Functor.const _ ).obj (F.obj (op U)) ‚ü∂ GK U G where
  app L := colimit.Œπ (FU (fullSubcategoryInclusion _ |>.op.obj _ ).unop _ <| trueCond) (op ‚ü®U,L.unop.property,rfl‚ü©) ‚â´ œÑ.app _

  naturality _ L _ := by
    suffices _ = colimit.Œπ (FU _ _ _ ) (op ‚ü®U , _ ‚ü©) ‚â´ œÑ.app (op _ ) ‚â´ G.map _ by simpa
    rw [‚Üê (œÑ.naturality _)]
    simp [AlphaUpStar, K1subK2subU]

/-- The cone of the diragram GK U with point F(U)-/
@[simps]
def ConeFtoAG : Cone (GK U G) := Cone.mk _ (ConeFtoAG_NT œÑ _)

/-- The natural transformation from F to Œ±_*G induced taking the natural map from ConeFtoAG to the colimit-/
@[simps]
def FtoAG : F ‚ü∂ (AlphaDownStar).obj G where
  app U:= limit.lift _ (ConeFtoAG œÑ U.unop)
  naturality U V _ := by
    --ext ne trouve pas limit.hom_ext
    apply limit.hom_ext
    intro _
    suffices (FU _ _ _ ).map _ ‚â´ colimit.Œπ (FU _ _ _ ) (op ‚ü®V.unop, _ ‚ü©) ‚â´ _ = colimit.Œπ (FU _ _ _ ) (op ‚ü®U.unop, _ ‚ü©) ‚â´ _ by simpa
    rw [‚Üê Category.assoc, ‚Üê colimit.w_assoc, Category.assoc]


/-- The naturals maps from the family of F(U) to  G(K) for U containing K -/
@[simps]
def CoconeAFtoG_NT : FU K F P ‚ü∂ (Functor.const _ ).obj (G.obj (op K))  where
  app W := œÉ.app _ ‚â´ limit.œÄ (GK _ _) (op ‚ü®K, W.unop.property.1‚ü©)
  naturality _ _ _:= by
    suffices _ = œÉ.app _ ‚â´ limit.œÄ (GK _ _) (op ‚ü®_,_‚ü©) by simpa
    rfl

/-- The cocone induced by the natural transformation CoconeAFtoG_NT-/
@[simps]
def CoconeAFtoG : Cocone (FU K F P) := Cocone.mk _ (CoconeAFtoG_NT œÉ K)

/-- The natural transformation  from Œ±^* F to G induced taking the natural map from the limit to CoconeAFtoG-/
@[simps]
def AFtoG : ( (AlphaUpStar).obj F ‚ü∂  G) where
  app K := colimit.desc _ (CoconeAFtoG _ K.unop)
  naturality _ _ _ := by
    apply colimit.hom_ext
    intro _
    suffices _ = œÉ.app _ ‚â´ limit.œÄ (GK _ _ ) (op _ ) ‚â´ G.map _ by simpa [AlphaUpStar]
    rw [‚Üê limit.w _ _ ]
    rfl

/-- The bijection between hom(Œ±F, G) and hom(F,Œ±G) -/
--@[simps!] --#lint does not like it
def homEquiv: (AlphaUpStar.obj F ‚ü∂ G) ‚âÉ ( F ‚ü∂ AlphaDownStar.obj G) where
  toFun := fun œÑ => FtoAG œÑ
  invFun := fun œÉ  => AFtoG œÉ
  left_inv œÑ := by aesop_cat
  right_inv œÉ := by aesop_cat


/-- The data necessary to build the adjunction between Œ±^* and Œ±_*-/
def adjthm : Adjunction.CoreHomEquiv (AlphaUpStar) (@AlphaDownStar X _ C _ _) where
homEquiv := (@homEquiv _ _ _ _ _ _)
homEquiv_naturality_left_symm _ _ := by
  ext
  apply colimit.hom_ext
  simp [homEquiv]
homEquiv_naturality_right _ _ := by
  ext
  apply limit.hom_ext
  simp [homEquiv]

/-- The adjunction between Œ±^* and Œ±_*-/
def AdjAlphaStar : (AlphaUpStar ) ‚ä£ (@AlphaDownStar X _ C _ _ ) := Adjunction.mkOfHomEquiv (adjthm)

--#lint
