import Mathlib
import Mathlib.Topology.Separation
import M2.Ksheaves

open CategoryTheory CategoryTheory.Limits TopologicalSpace TopologicalSpace.Compacts Opposite

variable {X} [TopologicalSpace X] --[T2Space X]

--Œ±^*
noncomputable section
variable (K:Compacts X)
variable (F:(Opens X)·µí·µñ‚•§ Ab)
variable (P:Opens X ‚Üí Prop)-- true pour le alpha normal et IsCompact (closure U.carrier) pour la version relativement compacte

def KsubU : Set (Opens X) := fun U : Opens X ‚Ü¶ (K : Set X) ‚äÜ U ‚àß P U

def KsubU_cat : Type := FullSubcategory (KsubU K P)

/-instance : SetLike (KsubU_cat X K P) X where
  coe U := U.obj.carrier

  coe_injective' := fun ‚ü®_ , _ ‚ü© ‚ü®_, _‚ü© h => by
    apply FullSubcategory.ext
    simp at h
    exact h-/


instance : Category (KsubU_cat K P) := FullSubcategory.category (KsubU K P)

@[simps!]
def FU : (KsubU_cat K P)·µí·µñ ‚•§ Ab := (fullSubcategoryInclusion <| KsubU K P).op.comp  F

variable {K‚ÇÅ K‚ÇÇ : Compacts X} (f : K‚ÇÅ ‚ü∂ K‚ÇÇ)

@[simps]
def K‚ÇÅsubK‚ÇÇsubU : (KsubU_cat K‚ÇÇ P) ‚•§ (KsubU_cat K‚ÇÅ P) where
  obj W := ‚ü®W.obj, Set.Subset.trans (leOfHom f) W.property.1, W.property.2‚ü©
  map {U V} F := homOfLE (leOfHom F)

@[simps]
def K‚ÇÅsubK‚ÇÇnatTrans : FU K‚ÇÇ F P ‚ü∂  (Functor.comp (K‚ÇÅsubK‚ÇÇsubU P f).op (FU K‚ÇÅ F P)) where
  app W := ùüô _

attribute [local aesop safe (rule_sets := [CategoryTheory])] colimit.hom_ext limit.hom_ext

@[simps]
def AlphaUpStarF : (Compacts X)·µí·µñ ‚•§ Ab  where
  obj K := colimit (FU K.unop F P)
  map f := colimMap (K‚ÇÅsubK‚ÇÇnatTrans F P f.unop) ‚â´ (colimit.pre (FU _ F P) (K‚ÇÅsubK‚ÇÇsubU P f.unop).op)

variable {F1 F2 : (Opens X)·µí·µñ ‚•§ Ab} (œÑ : F1 ‚ü∂ F2)

@[simps]
def œÑres : FU K F1 P ‚ü∂ FU K F2 P where
  app U := œÑ.app <| op U.unop.obj
  naturality := by simp [FU, œÑ.naturality]

@[simps]
def AlphaUpStarTau : AlphaUpStarF F1 P ‚ü∂ AlphaUpStarF F2 P where
  app K := colimMap (œÑres K.unop P œÑ)

@[simps]
def AlphaUpStarP : ((Opens X)·µí·µñ ‚•§ Ab) ‚•§ ((Compacts X)·µí·µñ ‚•§ Ab) where
  obj F := AlphaUpStarF F P
  map œÑ := AlphaUpStarTau P œÑ
  map_id F := by
    ext : 2 -- Le probl√®me si on ne mets pas le : 2 est que ext part dans la mauvaise direction
            -- en appliquant `AddCommGrp.ext` plut√¥t que `colimit.hom_ext`.
            -- Avec un
            -- attribute [-ext] AddCommGrp.ext
            -- Il trouve encore autre chose. Il serait bon de discuter de √ßa avec Jo√´l
    aesop_cat
  map_comp {_ _ _} _ _ := by
    ext : 2
    aesop_cat


variable (X)

def trueCond: Opens X ‚Üí Prop :=  fun _ ‚Ü¶ true

@[simps!]
def AlphaUpStar : ((Opens X)·µí·µñ ‚•§ Ab) ‚•§ ((Compacts X)·µí·µñ ‚•§ Ab) := AlphaUpStarP (trueCond X)

end

noncomputable section
--Œ±_*
variable (U:Opens X) (G:(Compacts X)·µí·µñ ‚•§ Ab)

def UsupK : Set (Compacts X) := fun K : Compacts X => (K : Set X) ‚äÜ U.carrier --‚àß IsCompact (closure U.carrier) peut √™tre?

def UsupK_cat : Type := FullSubcategory (UsupK U)

instance : Category (UsupK_cat U) := FullSubcategory.category (UsupK U)

@[simps!]
def GK : (UsupK_cat U)·µí·µñ ‚•§ Ab := Functor.comp (fullSubcategoryInclusion (UsupK U)).op  G

variable {U1 U2 : Opens X} (f : U1‚ü∂ U2)

@[simps]
def U2supU1supK : (UsupK_cat U1) ‚•§ (UsupK_cat U2) where
  obj W := ‚ü®W.obj, W.property.trans (leOfHom f)‚ü©
  map   := by aesop

@[simps]
def U2supU1natTrans : (GK U1 G) ‚ü∂  (Functor.comp (U2supU1supK f).op (GK U2 G)) where
  app W := ùüô _

-- bizarrement, aesop n‚Äôa pas l‚Äôair d‚Äôaimer `limit.hom_ext` m√™me si on l‚Äôajoute aux r√®gles
-- il serait bien d‚Äôessayer de comprendre √ßa.

@[simps]
def AlphaDownStarG :(Opens X)·µí·µñ ‚•§ Ab  where
  obj U := limit (GK U.unop G)
  map f := (limit.pre (GK _ G) (U2supU1supK f.unop).op) ‚â´ limMap (U2supU1natTrans G f.unop)
  map_id _ := limit.hom_ext (by aesop)
  map_comp {_ _ _} _ _ := limit.hom_ext (by aesop)

variable (G1:(Compacts X)·µí·µñ‚•§ Ab) (G2:(Compacts X)·µí·µñ‚•§ Ab) (œÉ :G1 ‚ü∂ G2)

@[simps]
def œÉres : GK U G1 ‚ü∂ GK U G2 where
  app K := œÉ.app <| op K.unop.obj

@[simps]
def AlphaDownStarSigma : (AlphaDownStarG G1) ‚ü∂ (AlphaDownStarG G2) where
  app U := limMap (œÉres U.unop G1 G2 œÉ )
  naturality _ _ _ := limit.hom_ext (by aesop)

variable (X)

@[simps]
def AlphaDownStar : ((Compacts X)·µí·µñ ‚•§ Ab) ‚•§ ((Opens X)·µí·µñ ‚•§ Ab) where
  obj G := AlphaDownStarG G
  map œÉ := AlphaDownStarSigma _ _ œÉ
  map_id G := by
    ext : 2
    apply limit.hom_ext
    simp
  map_comp {_ _ _} _ _ := by
    ext : 2
    apply limit.hom_ext
    simp
end

--Adjunction

variable {F : (Opens X)·µí·µñ ‚•§ Ab} {G:(Compacts X)·µí·µñ ‚•§ Ab}
         (œÑ : (AlphaUpStar X).obj F ‚ü∂ G) (œÉ : F ‚ü∂ (AlphaDownStar X).obj G)
         (K : Compacts X) (U : Opens X)

noncomputable section

@[simps]
def ConeFtoAG_NT: (Functor.const (UsupK_cat U)·µí·µñ).obj (F.obj { unop := U }) ‚ü∂ GK U G where
  app L := colimit.Œπ (FU (fullSubcategoryInclusion _ |>.op.obj L).unop F <| trueCond X)
                     (op ‚ü®U,L.unop.property,rfl‚ü©) ‚â´ œÑ.app _
  naturality := by
    intro K L f
    unfold GK
    simp
    rw [‚Üê (œÑ.naturality _)]
    unfold AlphaUpStar AlphaUpStarP AlphaUpStarF K‚ÇÅsubK‚ÇÇnatTrans K‚ÇÅsubK‚ÇÇsubU
    simp

@[simps]
def ConeFtoAG : Cone (GK U G) where
  pt := F.obj (op U)
  œÄ  := ConeFtoAG_NT œÑ U

@[simps]
def FtoAG : F ‚ü∂ (AlphaDownStar X).obj G where
  app U := limit.lift _ (ConeFtoAG œÑ U.unop)
  naturality U V f := by
    apply limit.hom_ext
    intro K
    simp
    rw [‚Üê Category.assoc, ‚Üê colimit.w_assoc]
    rfl

@[simps]
def CoconeAFtoG_NT: FU K F P ‚ü∂ (Functor.const (KsubU_cat K P)·µí·µñ).obj (G.obj <| op K)  where
  app W :=  œÉ.app ((fullSubcategoryInclusion (KsubU K P)).op.obj W) ‚â´
    limit.œÄ (GK ((fullSubcategoryInclusion (KsubU K P)).op.obj W).unop G)
            (op ‚ü®K, W.unop.property.1‚ü©) ‚â´ ùüô _
  naturality K L f := by simp; rfl

@[simps]
def CoconeAFtoG : Cocone (FU K F P) where
  pt := G.obj (op K)
  Œπ  := CoconeAFtoG_NT œÉ K

@[simps]
def AFtoG : (AlphaUpStar X).obj F ‚ü∂ G where
  app K := colimit.desc _ (CoconeAFtoG œÉ K.unop)
  naturality K L f := by
    apply colimit.hom_ext
    intro V
    simp [AlphaUpStar]
    rw [‚Üê limit.w]
    rfl

@[simps]
def homEquiv : ((AlphaUpStar X).obj F ‚ü∂ G) ‚âÉ (F ‚ü∂ (AlphaDownStar X).obj G) where
  toFun := fun œÑ ‚Ü¶ FtoAG œÑ
  invFun := fun œÉ ‚Ü¶ AFtoG œÉ
  left_inv œÉ := by
    ext : 2
    apply colimit.hom_ext
    aesop
  right_inv œÑ := by
    ext : 2
    apply limit.hom_ext
    aesop

def adjthm : Adjunction.CoreHomEquiv (AlphaUpStar X) (AlphaDownStar X) where
  homEquiv _ _ := homEquiv
  homEquiv_naturality_left_symm {_ _ _} _ _ := by
    ext : 2
    apply colimit.hom_ext
    intro _
    simp [homEquiv, AlphaUpStar]
  homEquiv_naturality_right {F G1 G2} œÑ œÉ := by
    ext : 2
    apply limit.hom_ext
    intro K
    simp [homEquiv, AlphaDownStar]

def AdjAlphaStar : (AlphaUpStar X ) ‚ä£ (AlphaDownStar X ) := .mkOfHomEquiv adjthm
