import Mathlib.CategoryTheory.Filtered.Basic
import Mathlib.Topology.Sets.Compacts
import Mathlib.Topology.Sets.Opens
--import Mathlib.CategoryTheory.Limits.Final
import Mathlib.CategoryTheory.Filtered.Final

open CategoryTheory CategoryTheory.Limits TopologicalSpace TopologicalSpace.Compacts Opposite

universe u

variable {X : Type u} [TopologicalSpace X]

noncomputable section

variable (K : Compacts X)
variable (P : Opens X ‚Üí Prop)-- true for the usual alpha and IsCompact (closure U.carrier) for the relatively compact version

/--The property of containing K and satisfying P-/
@[simp]
def KsubU : Set (Opens X) := fun (U:Opens _) => (K.carrier ‚äÜ U) ‚àß P U

/-- The condition that is always true -/
@[simp]
def trueCond :Opens X ‚Üí Prop:= Œª _ => true

/--The full subcategory induced by the property KsubU-/
def KsubU_cat : Type u := ObjectProperty.FullSubcategory (KsubU K P)

/-instance : SetLike (KsubU_cat K P) X where
  coe U:= U.obj.carrier

  coe_injective':= fun ‚ü®_ , _ ‚ü© ‚ü®_, _‚ü© h => by
    apply FullSubcategory.ext
    simp at h
    exact h-/

instance : Category (KsubU_cat K P) := ObjectProperty.FullSubcategory.category (KsubU K P)

/-- The functor that sends opens that containt K2 to opens that contains K1-/
@[simps]
def K1subK2subU {K‚ÇÅ K‚ÇÇ : Compacts X} (f : K‚ÇÅ ‚ü∂ K‚ÇÇ): (KsubU_cat K‚ÇÇ P) ‚•§ (KsubU_cat K‚ÇÅ P ) where
  obj W := (‚ü®W.obj,Set.Subset.trans (leOfHom f ) W.property.1
  , W.property.2‚ü©)
  map i := homOfLE (leOfHom i)


variable {P : Opens X ‚Üí Prop } (axiomP : ‚àÄ U1 U2, P U1 ‚Üí P U2 ‚Üí P (U1 ‚äì U2))
include axiomP

/-- U1 ‚äì U2 as an element of (KsubU_cat K P)-/
@[simps]
def InfKsubU (U1 U2 : KsubU_cat K P) : (KsubU_cat K P) := ‚ü®( U1.obj ‚äì U2.obj), ‚ü®le_inf U1.property.1 U2.property.1, axiomP _ _ U1.property.2 U2.property.2‚ü© ‚ü©

/-- The morphisme  U1 ‚äì U2 ‚ü∂ U1 for elements of (KsubU_cat K P)-/

def InfInLeftKSU (U1 U2 : KsubU_cat K P): (InfKsubU K axiomP U1 U2) ‚ü∂ U1:= homOfLE (by simp)

/-- The morphisme U1 ‚äì U2 ‚ü∂ U2 for elements of (KsubU_cat K P)-/
def InfInRightKSU (U1 U2 : KsubU_cat K P ): (InfKsubU K axiomP U1 U2) ‚ü∂ U2 := homOfLE (by simp)

include axiomP

/-- The evidence that the category (KsubU_cat K P) is cofiltered-/
lemma IsCofilteredKsubU : IsCofilteredOrEmpty (KsubU_cat K P) where
  cone_objs U1 U2 := by
    use InfKsubU K axiomP U1 U2
    use InfInLeftKSU K axiomP U1 U2
    use InfInRightKSU K axiomP U1 U2
  cone_maps U1 U2 _ _:= by
    use InfKsubU K axiomP U1 U2
    use InfInLeftKSU K axiomP U1 U2
    rfl

instance : IsCofiltered (KsubU_cat K trueCond) where
  toIsCofilteredOrEmpty := IsCofilteredKsubU K fun _ _ _ ‚Ü¶ congrFun rfl
  nonempty := by
    use ‚ä§
    simp


end

section
variable [T2Space X]
variable (K : Compacts X)

/-- the condition of being relatively compact-/
def relcCond : Opens X ‚Üí Prop := fun (U : Opens X) => IsCompact (closure (U : Set X))

lemma axiomPrc : ‚àÄ (U‚ÇÅ U‚ÇÇ : Opens X), relcCond U‚ÇÅ ‚Üí relcCond U‚ÇÇ ‚Üí relcCond (U‚ÇÅ ‚äì  U‚ÇÇ):= by
  intro U1 U2 h1 h2
  apply IsCompact.of_isClosed_subset
  ¬∑ exact IsCompact.inter h1 h2
  ¬∑ exact isClosed_closure
  ¬∑ rw [ Opens.coe_inf]
    apply closure_inter_subset_inter_closure

def RelCN_cat : Type u := (KsubU_cat K (relcCond))

instance : Category (RelCN_cat K) := instCategoryKsubU_cat K (relcCond)

instance : IsCofilteredOrEmpty (RelCN_cat K) := by
    apply IsCofilteredKsubU
    apply axiomPrc

variable [LocallyCompactSpace X] -- the locally compact is here for the non emptyness of RelCN_cat

instance : Nonempty (RelCN_cat K) := by
  have : IsOpen (‚ä§ : Set X)  := isOpen_univ
  have this2 : K.carrier ‚äÜ ‚ä§ := by
    intro _ _
    trivial
  rcases (exists_compact_between K.isCompact this this2 ) with ‚ü®L,hL‚ü©
  use ‚ü®interior L, isOpen_interior‚ü©
  constructor
  ¬∑ exact hL.2.1
  ¬∑ apply IsCompact.of_isClosed_subset hL.1 (isClosed_closure )
    intro a ha
    apply ha
    constructor
    ¬∑ exact IsCompact.isClosed hL.1
    ¬∑ apply interior_subset

end

section
variable (K : Compacts X)


def supSupK : Set (Compacts X) := fun (L : Compacts _) => (‚àÉ (U: Opens _), (K.carrier ‚äÜ U.carrier) ‚àß (U.carrier ‚äÜ L.carrier))

def supSupK_cat : Type u:= ObjectProperty.FullSubcategory (supSupK K )

lemma supSupKtoSupK (L : supSupK_cat K) : K.carrier ‚äÜ L.obj.carrier := by
  rcases L.property with ‚ü®U, hU1, hU2‚ü©
  exact hU1.trans hU2

lemma supSupKtoKsubInt (L : supSupK_cat K) : K.carrier ‚äÜ interior L.obj.carrier := by
  rcases L.property with ‚ü®U, hU1, hU2‚ü©
  intro _ hx
  use U
  constructor
  constructor
  ¬∑ exact U.isOpen
  ¬∑ exact hU2
  ¬∑ exact hU1 hx

noncomputable def supSupKToKsubU ( L : supSupK_cat K) : KsubU_cat K trueCond where
  obj := Classical.choose L.property
  property := by
    constructor
    ¬∑ exact (Classical.choose_spec L.property).1
    ¬∑ rfl


instance : Category (supSupK_cat K ) := ObjectProperty.FullSubcategory.category (supSupK K)

variable [T2Space.{u} X]

/-- L1 ‚äì L2 as an element of (supSupK_cat K)-/
@[simps]
def InfSupSupK (L1 L2 : supSupK_cat K ) : (supSupK_cat K ) := ‚ü®(L1.obj) ‚äì (L2.obj), by
  rcases L1.property with ‚ü®U1,hU11,hU12‚ü©
  rcases L2.property with ‚ü®U2,hU21,hU22‚ü©

  use U1 ‚äì U2

  constructor
  ¬∑ simp_all only [carrier_eq_coe, Opens.carrier_eq_coe, Opens.coe_inf, Set.subset_inter_iff, and_self]
  ¬∑ suffices _ ‚àß _ by simpa
    apply And.intro
    ¬∑ apply subset_trans _ hU12
      exact Set.inter_subset_left
    ¬∑ apply subset_trans _ hU22
      exact Set.inter_subset_right ‚ü©

/-- The morphisme L1 ‚äì L2 ‚ü∂ L1 for elements of (supSupK_cat K)-/
def InfInLeftSSK (L1 L2 : supSupK_cat K ): (InfSupSupK K L1 L2) ‚ü∂ L1 := homOfLE (by simp)

/-- The morphisme L1 ‚äì L2 ‚ü∂ L2 for elements of (supSupK_cat K)-/
def InfInRightSSK (L1 L2 : supSupK_cat K ): (InfSupSupK K L1 L2) ‚ü∂ L2 := homOfLE (by simp)

instance : IsCofilteredOrEmpty (supSupK_cat K) where
  cone_objs := by
    intro L1 L2
    use InfSupSupK K L1 L2
    use InfInLeftSSK K L1 L2
    use InfInRightSSK K L1 L2
  cone_maps := by
    intro L1 L2 i j
    use InfSupSupK K L1 L2
    use InfInLeftSSK K L1 L2
    rfl


variable [LocallyCompactSpace X]

instance : Nonempty (supSupK_cat K) := by
  have : IsOpen (‚ä§ : Set X)  := isOpen_univ
  have this2 : K.carrier ‚äÜ ‚ä§ := by
    intro _ _
    trivial
  rcases (exists_compact_between K.isCompact this this2 ) with ‚ü®L, hL‚ü©
  use ‚ü®L, hL.1‚ü©
  use ‚ü®interior L, isOpen_interior‚ü©
  constructor
  ¬∑ exact hL.2.1
  ¬∑ exact interior_subset

#check (ObjectProperty.Œπ (supSupK K) : (supSupK_cat K) ‚•§ (Compacts X))

@[simp]
def closureFuncK : RelCN_cat K ‚•§ supSupK_cat K where
  obj U := ‚ü®‚ü®closure U.obj, U.property.2‚ü©, by
    use U.obj
    constructor
    exact U.property.1
    exact subset_closure ‚ü©
  map i :=  homOfLE <| closure_mono <| leOfHom i

omit [LocallyCompactSpace X] in
lemma containClosure (U : Opens X) (L : Compacts X) (h : U.carrier ‚äÜ L.carrier) : closure U.carrier ‚äÜ L.carrier := by
  apply closure_minimal h
  apply IsCompact.isClosed
  exact L.isCompact'

instance closureFuncIsInitial : Functor.Initial (closureFuncK K) := by
  apply (Functor.initial_iff_of_isCofiltered _).2
  constructor
  intro L
  rcases L.property with ‚ü®U, hU1, hU2‚ü©
  use ‚ü®U, by
    constructor
    exact hU1
    apply IsCompact.of_isClosed_subset
    exact L.obj.isCompact'
    exact isClosed_closure
    apply containClosure
    exact hU2‚ü©-- probablement utile de le factoriser non?

  apply Nonempty.intro
  apply homOfLE
  apply containClosure
  exact hU2

  intro _ U _ _
  use U
  use ùüô _
  rfl
