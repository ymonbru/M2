import M2.alpha
import M2.K_stalks
import Mathlib.Topology.Sheaves.Presheaf
import Mathlib.Topology.Sheaves.Stalks

open CategoryTheory CategoryTheory.Limits TopologicalSpace TopologicalSpace.Compacts Opposite TopCat TopCat.Presheaf
open ZeroObject

variable (X) [TopologicalSpace X] [T2Space X]
variable {C} [Category C] [HasPullbacks C] [HasColimits C] [HasZeroObject C]
variable (p: of X) (F:Presheaf C (of X))


noncomputable section

#check Functor.comp (AlphaUpStar) (KstalkFunctor p)
#check @stalkFunctor C _ _ (of X) p

/-- Functor from the neighbourhoods of p to the opens that contains p-/
@[simp]
def NhdsToPsubU : (@OpenNhds (of X) p) ‚•§ (KsubU_cat (pC p) trueCond) where
  obj U := ‚ü®U.obj, Set.singleton_subset_iff.2 U.property,rfl‚ü©
  map f := homOfLE  (leOfHom f)

/-- The natural maps from F(U) (fo U containing p) to the stalk of F at p-/
@[simps]
def FUtoStalkŒπ : FU (pC p) F (trueCond ) ‚ü∂ (Functor.const _ ).obj (F.stalk p) where
  app U := germ _ U.unop.obj p (U.unop.property.1 (by rfl)) ‚â´ F.stalkSpecializes (by rfl)

/-- The cocone induced by FUtoStalkŒπ -/
@[simps]
def FUtoStalk : Cocone (FU (pC p) F (trueCond)):= Cocone.mk _ (FUtoStalkŒπ X p F)

variable (c:Cocone (FU (pC p) F trueCond))


/-- The natural maps from F at the neighbourhood of to a cocone of F(U) for U containing p-/
@[simps]
def CoconeFUpCtoOPenNhdspŒπ :(OpenNhds.inclusion p).op ‚ãô F ‚ü∂ (Functor.const _).obj c.pt where
  app U:= c.Œπ.app <| op <| (@NhdsToPsubU (of X) _ (p:of X)).obj U.unop
  naturality U V f := by
    have : ‚àÄ (X Y : (KsubU_cat (pC p) trueCond)·µí·µñ) (f : X ‚ü∂ Y), F.map f.unop.op ‚â´ c.Œπ.app Y = c.Œπ.app X ‚â´ ùüô c.pt := by
      apply c.Œπ.naturality
    suffices _ = c.Œπ.app (op ‚ü®U.unop.obj, _ ‚ü© ) ‚â´ ùüô c.pt by simpa
    rw [‚Üê this]
    apply congr
    repeat rfl

/-- The cocone indiced by the natural maps of CoconeFUpCtoOPenNhdspŒπ -/
@[simps]
def CoconeFUpCtoOPenNhdsp : Cocone ((OpenNhds.inclusion p).op ‚ãô F) := Cocone.mk _ (CoconeFUpCtoOPenNhdspŒπ X p F c)

/-- The evidence that that the cocone (FUtoStalk X p F) is colimit-/
@[simps]
def IsColimitFUtoStalk :IsColimit (FUtoStalk X p F) where
  desc s := colimit.desc _ (CoconeFUpCtoOPenNhdsp X _ F s)
  fac s U := by
    suffices s.Œπ.app (op ‚ü®U.unop.obj,_‚ü© ) = s.Œπ.app U by simpa [germ]
    rfl
  uniq s m hm := by
    apply Presheaf.stalk_hom_ext
    intro U hU
    suffices colimit.Œπ ((OpenNhds.inclusion p).op ‚ãô F) (op ‚ü®U , _‚ü©) ‚â´ m = s.Œπ.app (op ‚ü®U , _‚ü©) by simpa [germ]
    rw [‚Üê hm ]
    simp [germ]

variable (C)

/-- The morphism of colimit.cocone to FUtoStalk -/
@[simps]
def ColimitToFUstalk :(colimit.cocone (FU (pC p) F trueCond)) ‚ü∂ (FUtoStalk X p F) where
  hom  := colimit.desc _ (FUtoStalk _ _ _)

/-- The natural transformation from Œ± ‚â´ evaluation in p to the stalk functor-/
def AlphaComStalkEval : (AlphaUpStar) ‚ãô (EvalInP C p)‚ü∂ @stalkFunctor _ _ _ (of X) p  where
  app F := (ColimitToFUstalk X C p F).hom

/-- The natural transformation from Œ± ‚â´ stalk in p to the stalk functor. It's induced by AlphaComStalkEval and the isomorphism of evaluation in p and stalk in p for K-presheaves -/
def AlphaComStalk : (AlphaUpStar) ‚ãô (KstalkFunctor p)‚ü∂ @stalkFunctor C _ _ (of X) p := whiskerLeft _ (StalkToPFunc C p) ‚â´ AlphaComStalkEval _ _ _

instance : IsIso (AlphaComStalk X C p):= by
  suffices IsIso (AlphaComStalkEval X C p) by apply IsIso.comp_isIso
  apply ( NatTrans.isIso_iff_isIso_app _).2
  intro F
  suffices IsIso (ColimitToFUstalk X C p F) by
      rcases this.out with ‚ü®i,hi‚ü©
      use i.hom
      constructor
      ¬∑ calc (ColimitToFUstalk X C p F).hom ‚â´ i.hom = ((ColimitToFUstalk X C p F) ‚â´ i).hom := rfl
        _= _ := by rw [hi.1]
        _ = _ := by rfl

      ¬∑ calc i.hom ‚â´ (ColimitToFUstalk X C p F).hom = ( i ‚â´ (ColimitToFUstalk X C p F)).hom := rfl
        _= _ := by rw [hi.2]
        _ = _ := by rfl

  apply IsColimit.hom_isIso
  ¬∑ exact colimit.isColimit _
  ¬∑ exact IsColimitFUtoStalk X p F

/-- the evidence that the functor Œ±*‚â´ Kstalk and stalk are isomorphics -/
def IsoAlphaComStalk: (AlphaUpStar) ‚ãô (KstalkFunctor p) ‚âÖ @stalkFunctor C _ _ (of X) p:= asIso (AlphaComStalk X C p)

#lint
